---WSMAN---
<oh really? O.o *sweats*>
get-item WSMAN:\localhost\client\trustedhost

queries the trusted host


(get-item WSMAN:\localhost\client\trustedhost).values

gets the info on the trusted hosts


get-item WSMAN:\localhost\client\trustedhost -value "10.2.0.8,notchyna.ch" -concatenate

queries a very particular field in this, without concatenate it overwrites the old file/ A URL, or an IP can be used for the value field. :3




---invoke-command---

invoke-command -computername pwnd_host { restart-computer -force } -AsJob
#this command runs a command on a different computer in your same network

receve-job 1
#receves job info based off of jobs.

invoke-command -computername workstation3,server4,webserver5 C:\windows\fondevil.ps1
#sends the ps1 file to each of the selected computers then runs it, sending the ouput back to the screen after the scripts run.

New-PSSession -computername <the computers name>
#gets a powershell session on another computer, its like ssh-ing into a unix computer.

---ren---
short for re-name 
can be used to change the name and extension of a file


============================================ T H E   W I N D O W S   R E G I S T R Y ===================================================

hive keys are like root directorys or a rolladex
  under that are regestry keys, or sub-key, like a directory in a directory. a key can be a sub-key/ hive keys cannot.
    in the subkey there are actual entrys in the regestry. a 'regestry value' as windows calls it. I call it a 'reg entry'



hkey_classes_root --> the classes root is a symbolic link under   'computer\hkey_local_machine\software\classes'





============================================ T H E   N T F S  S Y S T E M ==============================================================

windows and unix made this at the same time.
the reasons a new one is not out;
lazy developers
there is no reason to break NTFS,
re-fs is a thing, but it cost money... and a lot of jank powershell shit

before NTFS there was FAT, the File Allocation Table.
which can hold 4 ENTIRE file partitions
E-FAT and FAT32 can hold more but there not as good as NTFS.
NTFS allows up to 26 primary partition on one drive.
NTFS also added alternet data stream. --> Gui's can't see them. so you have to use cmd and shit.
If the drive is full --> NTFS will overwrite what hasn't been used in a while.
when it overwrites too much the kernel will shit itself and cri and the server will crash. :3


========================================== T H E   B O O T   P R O C E S S   A N D   B C D E D I T ============================================


--- The windows NT 6 boot process with system files. ---
 
   POST --> (does the hardware exist?)
    |
    |
    V
BIOS/UEFI
    |
    |
    V
   MBR
    |
    |
    V
Volume Boot Sector
    |
    |
    V
Bootmgr(.exe) <--data-- BCD boot config data
    |
    |------------------\
    V                  |
 Winload            Winresume.exe <--data-- Hiberfil.sys
    |
    |
    V
Ntoskml.exe
    |
    |-----------------------\------------------\------------------\-------------------\------------------\
    |                       |                  |                  |                   |                  |
    V                     HAL DLL     Load Directory hive  Load Device Drivers     Process        Start Paging
 Smss.exe                                                                          Manager        Pagefile.sys <---data---> Pagefile.sys
    |                                                                                 |
    |                                                                            System Idle
    V                           __________________                                 Process 
Csrss.exe                      / Userinit  calls  \
    |---------------\         |Explorer then dies |
    |               |         |Leaving explorer   |
    V               V         |To winlogon.       |
Wininit.exe    Winlogon.exe ----> Userinit.exe ----> Explorer.exe
    |--------------\
    |              |
    V              V
Services.exe   Lsass.exe
    |--------------\--------------\---Svchost.exe - - - > > > (Svchost.exe runs multiple copies for what is needed to run the system at that point :3)
    |              |              |
    V              V              V
Svchost.exe    Svchost.exe    Svchost.exe
    
--- pre-boot process ---    
POST --> does the hardware exist?
BIOS --> uses MBR, starts the Bootmgr. BIOS is the older version of UEFI.
UEFI --> uses GPT (global partition table), starts the Bootmgrfw.efi, loaded into flash memory and is much faster. you can update firmware without loading the OS and there is the secure boot. verifys Drivers and ensures if the system has been changed while it is off\not powered on. when Secure boot is enabled, it is protected in almost every way. this is preferd over BIOS.
MBR --> the master boot record, the first 512 bytes on the driver. points to the Bootmgr.
bootmgr.exe --> manages what is loaded at startup. bootmgrfw.efi and bootmgr.exe replaced the NTLDR
  
--- boot process ---
boot.ini --> legacy kernal 5, used on win7 and prior.
BCD --> the Boot Config Datastore, started by bootmgr. starts winload and winresume.exe
Winload.exe --> 
  -whinresume.exe --> is for hibernation, takes everything in ram, EVERYTHING. and writes it to a disk. it then powers off the machine very slowly. when the system is powered on again. it calls Hiberfil.sys to load the system.
    |
    V
-- os loads --
Ntoskrnl.exe --> this is the windows Kernal, Winload calls the kernal and from there it takes control.
it loads the device drivers first, then it loads the HKLM, the windows registry. then the Pagefile.sys (memory swap file)
after loading the Pagefile, it loads the process manager --> then loads system idle process (its not even a process! >:3) it has an id of 0, name idle, it does not show in task manager, but in earlier versions of win10 it did show, and it said that every field was at 100% usage
system id 0 is the kernal, dont kill the idle process. please don't. 
last it loads the HAL DLL
-- os is loaded --
    |
    V
--- system (pid 4) (session 0 is a system session) ---
This should be a NON-INTERACTIVE session.
the start of the logon process. prior to windows NT, only one user could log in at a given time.
Smss.exe --> Smss creates sessions starting at 0 and increses. its sole reason is to create a logon session
Csrss.exe --> Client server run time. alows a local machine to call for services from a server that it does not have on the local machine
wininit.exe --> Windows initalization, starts Lsass.exe and svchost.exe
Lsass.exe --> user authentication, the only thing that can authenticate to the SAM
Svchost.exe --> the service that hosts a service. a service requires this to run. or the service would just be a process.

--- Smss.exe session 1 (user based session) ---
This should be an INTERACTIVE session. :3
Csrss.exe(1) --> starts along with winlogon(1)
Winlogon.exe(1) --> calls the Logonui(1) and the userinit(1), once an attempt has been made to log in, sends the credentals to Lsass for them to authenticate against the SAM, then Lsass calls back to the Winlogon.exe telling him that its good/or bad.
Logonui.exe(1) -->  The user Interface for logging in. dies after use. >:3
Userinit.exe(1) --> when everything is done, it calls the Explorer(1) then Userinit(1) dies and Explorer(1) has a Parent process id of a process that is dead. >:3
Explorer.exe(1) --> 


--- extra shits! ---
coldboot --> (system restarts shut off the entire os)
hotboot --> (the os stays active as the rest of the machine restarts)


=============== Processes and services ================= (Day 6 Operating Systems)

A process requires interaction, a service starts and stops on its own.

a dll is a resorce that contains info that other services and processes call upon.
dll's help the most with backwards compatability.

taskmgr shows system resorces being used.

get-ciminstance win32_pocess 
or 
get-wmiobject
this shows hidden proceses.  

get-CimClass -Classname *
shows every cim class. there is a few of them on the system    

get-ciminstance win32_process | select * shows a Handlecount "a number that counts how many times a process requested info from a dll."
get-ciminstance win32_process | where -property Name -like *LSASS* | select * --> shows everything for anything pertaining to lsass.

one way to manipulate an exe is to do DLL injection to change what the exe handles too. >:3


get-process -name lsass | select -expandproperty Modules | out-file $HOME\desktop\handles.txt -width 4096 --> -width writes output past what the screen can read.
get-process -name lsass | select -expandproperty Modules | format-table -wrap --> word wrap on the teminal... or just like, lessen the font size.
tasklist /m /fi "IMAGENAME eq lsass.exe"

sc.exe --> this is the service control manager. I recomend showsid as an option
    sc is an alias for set-content
    
schtasks.exe --> displays all schedualed tasks.
schtasks.exe /query /tn "\Microsoft\XbGamesSave\Xb1GameSaveTask" --> displays the xbox live save service for the xbox 1
the Gui for the scheduler is called "Task Scheduler"



















