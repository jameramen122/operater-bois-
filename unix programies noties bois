
Â¿
======================================================== U N I X   A N D   S T U F F =====================================================================


ssh linops --> vim .ssh/config --> the file we made to make loggin in easier --> chmod 600 .
ps1='$' --> makes the cmd prompt show as a $ and not name@domain:~$ 



--- ifconfig ---
this command has be depricated
is 'ip addr' now
or use 'ip a' 
--- route has also been depricated
use ip r
--- arp also removed for some reason
use 'ip neigh' or 'ip n'

--- the help commands ---
man --> gets the manual of the command listed after
help --> gets a help page for the command listed after
apropos --> searches the man pages for a keyword
whereis --> locate the binary, source, and manual page files for a command
whereis -b --> locate the binary file for a command
ssh-keygen --> makes an ssh key dummy

--- netstat ---
ss -ntlp has replaced it. netstat is depricated
remove the '-n' to see the ports as their service, not their number.
sudo ss -ntlp shows the processes that are using the port along with the connection info.

============ question funnies ===============
 --- who am i? ---
hostname --> name of the computer
uname -a --> kernal info, system archetecture

whoami --> username
id --> displays group id's

 --- what can I do? ---
 
sudo -l --> displays what a user can do 
 
 --- whats going on? ---
 
 
w --> everyone thats online
who -->
ps -elf --> gets a process list.
 
 --- why is that happening? ---
 
NOT COVERED IN DAY ONE...
 *dies*
 
 --- how is that happening? ---
 
 --- Whats in the file? ---

if there is a human readable file, whats in it? read it stoopid
 
 
 
 ========================================================= S O M E   H I S T O R Y ===============================================================
 
 linux is just the kernal
 
 it started with PDP-7... or MULTIX, a giand heavy peice of shit. multiplex interactive something
 they made Unix... which was better an 1000 different ways. in 1971
 other people made modifications to this OS and in 1983 some dude made GANU
 then in 1991 a man named Linus made what is today Linux... he wanted to call it FreeAxe
 
 then in 1992 Debian made a FUCK TON of different things, one of which is names UBUNTU
 Kali is made off of Debian
 Ubuntu and redhat had many offshutes.
 
 
 ====================================== some more things =================================
 
 you can use 'vim .' to open your diretory listing in vim
 /usr/bin --> holds your binarys
 /usr/sbin --> holds your system binarys, requires the sudo to run (/usr/sbin)
 /usr/local/bin --> holds more if the binarys
 /home --> the default directory. where a lot of the normal things are.
 /usr --> universal system resorces. the catch all for everything that wasn't put in a directory.
 /etc --> the 'everything thats configurable' directory, its like the windows regestry but different.
 /var --> things that are likely to change, so logs an' shit.
 /boot --> boot congif files and the boot process files. grub lives here! :3
 /dev --> the special hardware drivers and shit are here, but ther're not drivers. dev/null our trashcan lives here. the standard in out and err are also here, 
 /lib --> .dll libraries. nothing too crazy.
 /mnt --> shows perm attached external drives
 /media --> removable media. so cd's and shit.
 /opt --> optional things. a reservation of sorts. when you unpack something or download something this is often used
 /run --> run time and variable data, holds data based off of the current running computer session
 /tmp --> tenperarry files, everyone can access this
 /proc --> process information.
 
 =================================== U S E R S   A N D   G R O U P S ==================================================
 
 /etc/passwd --> holds the user info on every user.
 <USER NAME>:<PASSWD>:<UID>:<GID>:<comments>:<home path>:<shell path>
 
 --- ls . ---
 
   U  G  O
 -rw-r--r--
 or 
 drwx-rx-rx
 
 
 --- SUID ---
 
 The SUID is NOT the sticky bit
 
 the SUID is the
 
 ls -lisa /usr/bin/passwd
12062 60 -rwsr-xr-x 1 root root 59640 Mar 22  2019 /usr/bin/passwd

the U x bit is an S right now. that is a setting that allows anyuser change the file, but only the entries that are theirs, not anyone elses.

ls -lisa /var/tmp/. 
 29638 4 drwxrwxrwt  6 root root 4096 Aug 17 00:06 .
 
 the letter t states that the owner is the only one that can delete it. -->
 
 ---s--s--t
 and 
 ---S--S--T
 
 the case of the letter deturmines if the x bit is turned on underneath. >:3
 
 
 
 
 ==================================================== U N I X   B O O T   P R O C E S S ===============================================================
 
 POST (power on self test)
  |-------------------------------------------\
  |                                            \
  V                                             \
(BIG MIKE GOT KIILED IN RUSSIA (Bmgkir))         |
 BIOS                                           UEFI
  |                                              |
  V                                              V
 MBR                                            GPT
  |                                              |
  V                                              V
 GRUB                                          grub.efi
  \-----------------\      /-------------------/
                     V    V
                     Kernel
   /-----------------/    \--------------------\
  V                                             V
 Init                                          Init
  |                                             |
  V                                             V
SysV (sys 5)                               systemd Init
  \-----------------\      /-------------------/
                     V    V
        System executes at wanted run level

UEFI
Boots faster
supports 9 zettabytes of space.
supports GPT and increased number of partitions.
'sudo dmidecode -t bios' shows what you have loaded for UEFI vs. BIOS
'lsblk' shows what disks are mounted and where.
'df -h' is another that shows nore thann the last one
'sudo parted -l' shows info on partitions.

====== HEX dump ========
'sudo xxd -l <length in bytes(512)> -g 1 <use lsblk to figure out where it is>/dev/vda>' shows a hex dump of things.
eb --> a hex of 'eb' means JUMP the following two bytes tell it where to jump
90 --> this is the NO-OP sleed
the last 66 bytes make up the magic number and the 4 partitions
2 bytes of magic number
64 bytes for partition
446 bytes for the the rest of the mbr

======= Copy the boot record ========
'sudo dd if=/dev/sda of=MBRcopy bs=1 count= 512'

======= GRUB =========
the config file is - /boot/grub/menu.lst
altering boot entries, election different kernels, and modifying th initial RAM dis (initrd)
after doing such, the 'e' key can be used to edit the commands before booting, 'a' to modify the kernel arguments before

cat /boot/grub/grub.cfg
allows one to read the menu entries, it is all bash. all of it... all.

====== Kernel (pid 0) =========== 
kernel is process id 0 [kthreadd]
while the system is running after boot, the kernal runs the interaction between the os and the hardware.
Linux is a monolithic code that is 26 million lines of code in C.
'sudo lsmod' shows the modules that the kernel uses to interact with hardware.
kernels are hard codded to execute sbin/init (backwards compatability)

========== INIT and Runlevel =========
--- SysV ---
the only way to shut off a computer
'ls -l /sbin/init' if there is a link to systemd, you're on a SysD 2010 system, if not you're on SysV 1983 system
'ps -p 1' shows the pid 1 systemd cmd, if its not there you are on a SysV 1983 system
'pstree'
INIT is the Service/ and process manager
on a SysD system it shows SystemD as the parent process. not init.
'ls /etc/rc3.d' this shows everything that runs at init runlevel 3 the 's' at the beguining of them tells them to start, to kill them (ls /etc/rc1.d <runlevel 0 is halt>) you put a 'k' at the beguining 

cat /etc/inittab if you need to see the settings for init/runlevel
runlevel 0 --> is halt. DO NOT SET AS DEFAULT.
runlevel 1 --> Root singleuser.
runlevel 2 --> full multiuser, without networking.
runlevel 3 --> full multiuser, with networking.
runlevel 4 --> unused multiuser.
runlevel 5 --> X11 multiuser network GUI.
runlevel 6 --> is reboot.  DO NOT SET AS DEFAULT.
if there is a service running other than an init.d service, then its probs malicious

--- SysD ---
runlevel
   0  =  poweroff.target --> shuts down and powers down the system
   1  =  rescue.target --> Configres a rescue shell session
   2  =  Multi-user.target --> Not with Network sercives
   3  =  Multi-user.target --> with Network sercives
   4  =  Multi-user.target --> with Network sercives
   5  =  Graphical.target --> Graphical, with Network sercives
   6  =  reboot.target --> shuts down and reboots

sysd also has 'systemctl list-dependencies graphical.target' to show dependancies that runlevel 5 needs, its color coded too. green = active, white = inactive, red cross= bad 
'systemctl show -p wants raphical.target' shows the wants of the targeted runlevel.
'systemctl list-unit-files' this is color codded too. shows the ini-like files
'systemctl cat graphical.target' tells you the location of the runlevel and gives a brief description of the unit requirements and want.

--- used for interactive login shells---
cat /etc/environment --> global/system wide
cat /etc/profile -->  global/system wide > used for persistence, .profile stores the user spisific persistances 
cat /etc/bash.bashrc --> this is the system-wide bash.rc file.

ctl+alt+t gives you a non-login shell

========== QUESTIONS ============
minimum size of kernal modules


whats the difference of static and transient(means something along the lines of tmp, it has to do with scope.) in 'systemctl list-unit-files'
:: enabled = means it starts with the comp start. static = means if the instal section is not there that unit cannot be enabled or disabled. disabled = means it is not setup to run when system starts. transient = created to be run like a service while the system is running



===================================== P r o c e s s   V a l i d i t y =========================================

ps --> process snapshot
top --> a live updating process listing
ps -elf --> 'e' is for everything, 'l' long listing, 'f' formating.
ps -Nlf --ppid 2 --> Not anything that has a parrent process of 2 [kthreadd] (the kernel)
ps -Nlf --ppid 2 --forest --> has a 'tree-like' format for the processes 
ps -Nlf --ppid 2 --forest | grep ps
ps -elf --ppid 2 --forest | grep -B 8 ps --> this greps for the item ps and its process tree

grep -B <number> --> shows lines before the grep'd item
grep -A <number> --> shows lines after the grep'd item
grep --context=<#> <item> --> above and below

this is the top command, its the dynamicly changing process manager.

top - 12:49:29 up 11 days, 16:35,  2 users,  load average: 0.00, 0.00, 0.00
Tasks:  91 total,   1 running,  54 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :  4039252 total,  3112396 free,   109528 used,   817328 buff/cache
KiB Swap:        0 total,        0 free,        0 used.  3639904 avail Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND  


load average: 0.00, 0.00, 0.00 --> load average max's out at x.00 where x is the amount of processer cores you have.
f --> press f while in top to add options with spacebar. exit with escape.
Shift + V --> makes the listing like --forest. but funnier.

htop --> way nicer looking but has a lot of things going on.


system calls
shell --> fork() --> shell
                       |
                  cp of shell --> exec(ls) --> ls
                  

if the process is in all caps it is a childprocess. and that there is a rocess.
so if there is a /usr/sbin/cron
                      \_ /usr/sbin/CRON --> this means there is a cronjob running.

====================== o r p h a n   a n d   z o m b i e   p r o c e s s e s ================================
orphans have lost there parent process.
orphan processes are taken in by systemd or init.
Daemons are orphans but not all orphans are daemon
disown -a && exit --> close a shell/terminal and force all children to be adopted

Zombie (Defunct) --> a process that has compleated but the parent process hasn't picked it back up leaving it in the process table taking up an entry. under the 'S' (state) catagory of a ps -elf command these show up as 'Z' or 'D'

fork bomb --> a DOS attackwherein a process continually replicates itself to deplete available system resources,
              Remedy - âulimit -u 30â sets the max processes a user can run at 30

Daemons run in the background. 
Persistence - Daemons are service that should run for duration of system operation, since init is parent, would require shutdown for parent to die.
Malicious processes are sometimes orphaned and named to make it look like a daemon process âps --ppid 1 -lfâ

=============================== j o b   c o n t r o l ====================================

the default signal for a 'kill' command is 15. to shutdown gracefully
the 'kill -9' sends the signal 9 tears it down without care to the state of the program.
kill -l --> shows a listing of every signal that can be sent... all 64 of them >_<
                - 38-64 are SIGRTMIN and SIGRTMAX. they are set aside for what you need for customization. 

============================== C R O N  J O B S ===========================================

scheduled tasks!!!

- cron daemon checks the directories /var/spool/cron, /etc/cron.d and the file /etc/crontab.
    - the daemon does this once a minute and executes any commands specified that match the time.

- Two types of cron jobs
  -System cron jobs
    -run as root and rigidly scheduled
    -perform system-wide maintenance tasks (Cleaning out /tmp or rotating logs)
    -controlled by /etc/crontab
  -User cron jobs
    -Use 'crontabâ command to create user cron jobs
    -stored in /var/spool/cron/crontabs/<username>

the system uses cron.d, /etc/crontab could be very empty. var/spool/cron is a directory for users.

âcrontab -u [user] fileâ - sets users crontab file to the contents of listed file
âcrontab -l -u [user]â - Displays userâs crontab contents
âcrontab -r -u [user]â - Removes userâs crontab contents
âcrontab -e -u [user]â - edits userâs crontab contents

crontab jobs run with the permissions of the owner of the crontab file

CRON SYNTAX
* * * * * /directory/and/command
| | | | |
| | | | +---- Day of the Week   (range: 0-7, 1 = Monday, 2 = Teusday, 3 = Wensday, 4 = Thursday, 5 = Friday, 6 = Saturday, 7 = Sunday, 0 = Sunday)
| | | +------ Month of the Year (range: 1-12)
| | +-------- Day of the Month  (range: 1-31)
| +---------- Hour              (range: 0-23)
+------------ Minute            (range: 0-59)

==================================== l s o f ==============================================

this is a silly command... :3

sudo lsof -c sshd --> gets the running 'processes' for the process sshd.

#    :  The number in front of flag(s) is the file descriptor number used by the process to associate with the file
u    :  File open with Read and Write permission
r    :  File open with Read permission
w    :  File open with Write permission
W    :  File open with Write permission and with Write Lock on entire file
mem  :   Memory mapped file, usually for shared library

=================================== r a n d o m b u l l s h i t a a a a a ==============================================
sudo systemctl list-units --all --> displays all units



======================================== a u d i t i n g  &  l o g g i n g ===========================================================
--- P R O S ---
Remote Logging
 -Main system crashes
 -Becomes compromised

Historical analysis
 -Record of anomalous activity
 -Diagnostics of a failure
--- C O N S ---
 -Logs can cryptic
 -Logging is not free
 -Logging too much/little --> DON'T LOG TOO MUCH! you will break something.
!-Not analyzing logs! --> why have them if you ain't lookin' at them!?
 -Not looking at the right logs --> another problem of having too many.
 -Time Normalization --> multiple time zones in the same building... like an embassy I guess.
 -Confirmation of critical systems usage --> make sure to hide these logs as best you can. no special things out in the open.


 -Authentication
    /var/log/auth.log - Authentication related events
    /var/run/utmp - Users currently logged in
    /var/log/wtmp - History file for utmp
    /var/log/btmp - Failed login attempts
      -ssh::notty --> means no tty, or no gui is there. generally a failed attempt.
 
 -Application
    apache - Web Server (dir)
    apt - Package Manager (dir)
      -when you download something, not really a lot in the application logs.
    /var/log/mysql.log

 -System
    /var/log/messages - Legacy Catch all
    /var/log/syslog - Ubuntu/Debian Catch all
    dmesg = Device Messenger (queires /proc/kmsg)
      -Kernel Ring Buffer - Never fills
      -First logs generated by the system

--- Logging locations and shit ---
    -Location : /var/log
    -Config File : /etc/rsyslog.conf
    -Service : /usr/sbin/rsyslogd

--- LOGGING DAEMON ---
-/usr/sbin/rsyslogd
  -User space daemon - Reads messages written to /dev/log and formats and stores them based on /etc/rsyslog.conf rules.
    -syslog() via libc
    -kernel ring buffer
    -audit records via audit subsystem (auditd)
--- CONFIG FILE ---
-/etc/rsyslog.conf
  -Log entries follow syslog standard facility.severity
  -facility = what program, or part of system, log is from
  -severity = urgency
    FACILITY CODES                                      SEVERITY CODES --> starts lowest to highest.
    0   kernel messages                                 0  emerg, panic:  Emergency: system is unusable
    1   user-level messages                             1  alert:         Action must be taken immediately
    2   mail system                                     2  crit:          Critical conditions
    3   system daemons                                  3  err, error:    Error conditions
    4   security/authorization messages                 4  warn, warning: Warning conditions
    5   messages generated internally by syslogd        5  notice:        Normal but significant condition
    6   line printer subsystem                          6  info:          Informational messages
    7   network news subsystem                          7  Debug:         Debug-level messages
    8   UUCP subsystem
    9   clock daemon
    10  security/authorization messages
    11  FTP daemon
    12  NTP subsystem13|log audit
    ...TRIMMED

--- for Ip's/sockets found in the /etc/rsyslog.conf ---
@ --> udp
@@ --> tcp

--- for severity codes found in /etc/rsyslog.conf ---

auth,authpriv.*                      /var/log/auth.log
*.*;auth,authpriv.no                 -/var/log/syslog
mail.*                               -/var/log/mail.log

*.=info                              @@10.10.10.1:514
*.=info;*.=notice;*.=warn;\
       auth,authpriv.none;\
       cron,daemon.non;\
       mail,news.non               -/var/log/messages

(*.=<whatever> calls a siv level and higher)
(*.!<whatever> grabs the opposet of the prior)


--- LOG ENUMERATION / MANAGEMENT ---
 -Best Practices
   -Meaningful Naming Schema
   -Separate logs logically and by precedence
   -Sync time across network
   -Control log access
 -Utilize cron jobs / scripts
   -logrotate
     /etc/logrotate.conf
     How large to let files get. How long to keep them. --> a day should really be the longest you keep a log except for maybe a really crazy one.

--- USEFUL LOGGING COMMANDS ---
  tail -f - Continuously show end of file
  less /var/log/syslog - View Log in page viewer
  logger - Send a user generated message to system Log i.e. Starting Update
  > /var/log/messages - Wipes Logs
    Why do this as opposed to deleting/recreating files?
  last -f /var/log{wtmp,btmp} - Needed to view data files

  --- SYSTEM D STIFFS ---
  read logs w/ journalctl
  
  journalctl -b <id?> -->
  journalctl -u <log name> --> looks at entries in a log
  
  

